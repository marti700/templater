package document

import (
	"bytes"
	"encoding/base64"
	"fmt"
	"io"
	"log"
	"mime/multipart"
	"net/http"
	"net/http/httptest"
	"net/url"
	"os"
	"path/filepath"
	"strings"
	"testing"
)

func TestDocumentPreview(t *testing.T) {
	req, err := http.NewRequest("GET", "http://localhost:9090/document?template=Acto de Venta.docx", nil)
	if err != nil {
		log.Fatal(err)
	}
	//
	reqRecorder := responseRecorderHelper(req, DocumentPreview("./testTemplates/", "../preview.html"))

	// Check the status code and the body of the response.
	if status := reqRecorder.Code; status != http.StatusOK {
		t.Error("handler returned wrong status code:", status)
	}

	testResponse(t, reqRecorder, "./expectedResponses/getPreview.html")

}

func TestTemplateList(t *testing.T) {
	req, err := http.NewRequest("GET", "http://localhost:9090/document/templates", nil)
	if err != nil {
		log.Fatal(err)
	}
	//
	reqRecorder := responseRecorderHelper(req, GetTemplatesList("../tmpls", "../templates.html"))

	// Check the status code and the body of the response.
	if status := reqRecorder.Code; status != http.StatusOK {
		t.Error("handler returned wrong status code:", status)
	}

	testResponse(t, reqRecorder, "./expectedResponses/getAvailableTemplates.html")

}

func TestNewDocument(t *testing.T) {
	req, err := http.NewRequest("GET", "http://localhost:9090/document/templates", nil)
	if err != nil {
		log.Fatal(err)
	}
	//
	reqRecorder := responseRecorderHelper(req, GetTemplatesList("../tmpls", "../document-selection.html"))

	// Check the status code and the body of the response.
	if status := reqRecorder.Code; status != http.StatusOK {
		t.Error("handler returned wrong status code:", status)
	}

	testResponse(t, reqRecorder, "./expectedResponses/getDocumentSelectionModal.html")

}

func TestCreateDocument(t *testing.T) {

	form := url.Values{}
	form.Add("nombre_alcaldesa", "La alcandesa")
	form.Add("nombre_remitente", "el remitente")

	req, err := http.NewRequest("POST", "http://localhost:9090/document/create?template=carta_test.docx", strings.NewReader(form.Encode()))
	if err != nil {
		log.Fatal(err)
	}

	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	reqRecorder := httptest.NewRecorder()
	handler := http.HandlerFunc(CreteDocument("../tmpls/"))

	handler.ServeHTTP(reqRecorder, req)

	newDoc, err := os.Open("./substitution.docx")

	if err != nil {
		log.Fatal(err.Error())
	}

	defer newDoc.Close()
	defer os.Remove(newDoc.Name())

	data, err := io.ReadAll(newDoc)

	if err != nil {
		log.Fatal(err.Error())
	}

	if base64EncodedFile != base64.StdEncoding.EncodeToString(data) {
		t.Error("File was not generated correctly")
	}
}

func TestUploadTemplate(t *testing.T) {
	file, err := os.Open("./testFiles/testTemplate.txt")
	if err != nil {
		log.Fatal(err)
	}

	var buf bytes.Buffer
	writer := multipart.NewWriter(&buf)

	part, err := writer.CreateFormFile("template", filepath.Base(file.Name()))
	if err != nil {
		log.Fatal(err)
	}

	if _, err := io.Copy(part, file); err != nil {
		log.Fatal(err)
	}

	req, err := http.NewRequest("POST", "http://localhost:9094/document/template/upload", &buf)
	if err != nil {
		log.Fatal(err)
	}

	req.Header.Set("Content-Type", writer.FormDataContentType())
	writer.Close()
	reqRecorder := httptest.NewRecorder()
	handler := http.HandlerFunc(Uploadtemplate("../tmpls/", "../templates.html"))

	handler.ServeHTTP(reqRecorder, req)

	// Check the status code and the body of the response.
	if status := reqRecorder.Code; status != http.StatusOK {
		fmt.Println("handler returned wrong status code:", status)
	}

	uploadedFile, err := os.Open("./testFiles/testTemplate.txt")

	if err != nil && uploadedFile.Name() != "testTemplate.txt" {
		t.Error("File was not correctly uploaded")
	}

	os.Remove("../tmpls/testTemplate.txt")
}

func responseRecorderHelper(req *http.Request,
	handler func(http.ResponseWriter, *http.Request)) *httptest.ResponseRecorder {

	// ctx := context.Background()
	// container := DbContainer()
	// testDBhost, _ := container.ContainerIP(ctx)

	// dbConfig := SetUp(testDBhost)

	reqRecorder := httptest.NewRecorder()
	h := http.HandlerFunc(handler)
	h.ServeHTTP(reqRecorder, req)

	return reqRecorder
}

func testResponse(t *testing.T, reqRecorder *httptest.ResponseRecorder, expectedResponseFilePath string) {
	// Check the if the returned html is the correct one.
	f, err := os.ReadFile(expectedResponseFilePath)
	if err != nil {
		log.Fatal(err.Error())
	}

	actualResponse := reqRecorder.Body.String()
	expectedResponse := string(f)
	// os.WriteFile("tt.html", reqRecorder.Body.Bytes(), 0755)

	fmt.Println(actualResponse)
	if actualResponse != expectedResponse {
		t.Error("Returned HTML is not the correct one")
	}
}

const base64EncodedFile = ""
